name: ci-build-deploy

on: push

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        project:
          [
            "libiio-ubuntu-22.04",
          ]
        include:
          - project: "libiio-ubuntu-22.04"
            DOCKERFILE: "libiio/Dockerfile-ubuntu-22.04"
            TAG_ROOT: "libiio_ubuntu_22_04-ci"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker images
        id: docker_build
        uses: docker/build-push-action@v4.1.1
        with:
          file: ${{ matrix.DOCKERFILE }}
          push: true
          tags: |
            tfcollins/${{ matrix.TAG_ROOT }}:latest
            ghcr.io/sdgtt/dockerfiles/${{ matrix.TAG_ROOT }}:latest


  # docker_arm:
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       project: ["libiio-ubuntu-18.04", "libiio-debian-bullseye"]
  #       include:
  #         - project: "libiio-ubuntu-18.04"
  #           DOCKERFILE: "libiio/Dockerfile-ubuntu-18.04"
  #           TAG_ROOT: "libiio_ubuntu_18_04-ci-arm-ppc"
  #           ARCH: linux/arm64
  #           REFERENCE_IMAGE: "ubuntu:18.04"
  #         - project: "libiio-debian-bullseye"
  #           DOCKERFILE: "libiio/Dockerfile-debian-bullseye"
  #           TAG_ROOT: "libiio_debian_bullseye-ci-arm-ppc"
  #           ARCH: linux/arm64
  #           REFERENCE_IMAGE: "debian:bullseye"

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Login to DockerHub
  #       if: github.ref == 'refs/heads/main'
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #       with:
  #         platforms: arm,arm64,ppc64le,s390x
  #     - name: Set up Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         install: true
  #         driver: docker-container
  #     - name: Available platforms
  #       run: echo ${{ steps.buildx.outputs.platforms }}

  #     - name: Test build
  #       run: |
  #         cp Dockerfile-arm Dockerfile
  #         docker buildx create --name armbuilder
  #         docker buildx use armbuilder
  #         docker buildx build --builder armbuilder -t test_${{ matrix.TAG_ROOT }} --platform linux/arm64 --load .
  #         ARCH_CHECK=$(docker run --platform linux/arm64 test_${{ matrix.TAG_ROOT }}:latest uname -a)
  #         echo "$ARCH_CHECK"
  #         echo "$ARCH_CHECK" | grep -i aarch64 || exit 1

  #     - name: Build and push
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         push: true
  #         tags: tfcollins/${{ matrix.TAG_ROOT }}:latest
  #         file: Dockerfile-arm
  #         context: .
  #         platforms: linux/arm,linux/arm64,linux/ppc64le,linux/s390x
