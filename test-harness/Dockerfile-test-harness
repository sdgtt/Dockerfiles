FROM ubuntu:20.04

ENV XLNX_INSTALL_LOCATION=/opt/Xilinx
ENV DEBIAN_FRONTEND=noninteractive

RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt update
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y libpng-dev libfreetype6-dev libblas-dev liblapack-dev gfortran build-essential xorg
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y openjdk-8-jre openjdk-8-jdk libgtk2.0-0 libxss1 libxt6 zip unzip curl wget tar git xvfb
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y fakeroot libncurses5-dev libncurses5 libssl-dev ccache dfu-util u-boot-tools device-tree-compiler libhidapi-dev
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y libssl-dev mtools bc python cpio zip unzip rsync file wget
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y libicu66 libicu-dev screen
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y graphviz rpm bzip2 gzip
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND dpkg --add-architecture i386
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y lib32stdc++6
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y cmake make build-essential libxml2-dev bison flex libcdk5-dev cmake
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y libaio-dev libusb-1.0-0-dev libserialport-dev libzstd-dev
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y libavahi-common-dev libavahi-client-dev
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y python3-pip iputils-ping sudo net-tools iproute2 python3-tk
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt-get install -y autoconf automake libtool

# Set BASH as the default shell
RUN echo "dash dash/sh boolean false" | debconf-set-selections 
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND dpkg-reconfigure dash

# Set up locale
RUN DEBIAN_FRONTEND=$DEBIAN_FRONTEND apt install -y locales
ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8
RUN locale-gen en_US.UTF-8

# Install libserialport, libiio, nebula, telemetry
COPY /test-harness/*.sh /scripts/
RUN chmod -R +x scripts
RUN /scripts/install_libserialport.sh 
RUN /scripts/install_libiio.sh 
RUN /scripts/install_nebula.sh
RUN /scripts/install_telemetry.sh

# Cleanup
RUN apt-get clean

# Entrypoint for runtime pre-processing
COPY ../docker-entrypoint-hdl.sh /usr/local/bin/docker-entrypoint.sh
